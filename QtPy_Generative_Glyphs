
#include <U8g2lib.h>

//the line below specific to the OLED being used.  Replace F with 1 or 2 to reduce buffer size
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

    //glyph spacers
   int u=1;
   int v=1;
   int a=3;
   int spacer = a*3+2;

void glyph();   
void circle();
void setup() {
  // put your setup code here, to run once:
randomSeed(analogRead(2));

u8g2.begin();  

//Clear Screen
 u8g2.firstPage();
 do {

 } while ( u8g2.nextPage() );

 u8g2.setDrawColor(1);
}

void loop() {
  // put your main code here, to run repeatedly
 u8g2.setFont(u8g2_font_u8glib_4_tr);
 u8g2.drawFrame(0,0,128,64);
 u8g2.sendBuffer();
 
 for (u=5; u<119; u=u+spacer){
  for (v=5; v<52; v=v+spacer){
    
    glyph();
    
  }
 }
 
  circle();
  
   u8g2.sendBuffer();
   delay(1000);
   u8g2.clearBuffer();
   
}

 void glyph() {  

   int nooflines = random (3,14);

   for (int i=0;i< nooflines;i++){

   int randomline =random(1,14);
   switch (randomline)
   {
    case 1:
    break;

    case 2:
    u8g2.drawLine(u,v,u+a,v);
    break;

    case 3:
    u8g2.drawLine(u+a,v,u+a+a,v);
    break;

    case 4:
    u8g2.drawLine(u,v+a,u+a,v+a);
    break;

    case 5:
    u8g2.drawLine(u+a,v+a,u+a+a,v+a);
    break;

    case 6:
    u8g2.drawLine(u,v+a+a,u+a,v+a+a);
    break;

    case 7:
    u8g2.drawLine(u+a,v+a+a,u+a+a,v+a+a);
    break;

    case 8:
    u8g2.drawLine(u,v,u,v+a);
    break;

    case 9:
    u8g2.drawLine(u+a,v,u+a,v+a);
    break;

    case 10:
    u8g2.drawLine(u+a+a,v,u+a+a,v+a);
    break;

    case 11:
    u8g2.drawLine(u,v+a,u,v+a+a);
    break;

    case 12:
    u8g2.drawLine(u+a,v+a,u+a,v+a+a);
    break;

    case 13:
    u8g2.drawLine(u+a+a,v+a,u+a+a,v+a+a);
    break;
   }

   }

  //u8g2.sendBuffer(); //prints glyphs one at a time
   
 }

 void circle() {  
   u8g2.setDrawColor(0);
   u8g2.drawBox(37,2,55,60);
   u8g2.setDrawColor(1);
   
   int noofcircles = random (10,40);

   for (int i=0;i< noofcircles;i++){

   int randomcircle =random(3,28);
   int randomseg = random(1,6);

   switch(randomseg)
{
   case 1:
    u8g2.drawCircle(64,32,randomcircle, U8G2_DRAW_UPPER_RIGHT);
   break;

   case 2:
    u8g2.drawCircle(64,32,randomcircle, U8G2_DRAW_UPPER_LEFT);
   break;

   case 3:
    u8g2.drawCircle(64,32,randomcircle, U8G2_DRAW_LOWER_RIGHT);
   break;
   
   case 4:
    u8g2.drawCircle(64,32,randomcircle, U8G2_DRAW_LOWER_LEFT);
   break;

   case 5:
    u8g2.drawCircle(64,32,randomcircle, U8G2_DRAW_ALL);
   break;
}
   }
    //add noise
    int numofdisk = random(40,180);
    for (int i=0;i< numofdisk;i++){
    int randomdiskx =random(37,92);
    int randomdisky =random(2,61);
    int randomdiskd =random(1,2);

    u8g2.setDrawColor(0);
    u8g2.drawDisc(randomdiskx,randomdisky,randomdiskd);
    u8g2.setDrawColor(1);
   }
  
  
   
 }


#include <U8g2lib.h>

//the line below specific to the OLED being used.  Replace F with 1 or 2 to reduce buffer size
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

void orbit();   
void setup() {
  // put your setup code here, to run once:
randomSeed(analogRead(2));

u8g2.begin();  

//Clear Screen
 u8g2.firstPage();
 do {

 } while ( u8g2.nextPage() );

 u8g2.setDrawColor(1);
}

void loop() {
  // put your main code here, to run repeatedly
 u8g2.setFont(u8g2_font_u8glib_4_tr);
 
    orbit();
 
   u8g2.sendBuffer();
   delay(1000);

   u8g2.clearBuffer();
   
}
 void orbit() {  

  int randomnoofplanets =random(1,7); //Number of planets in system
  int randomstar =random(4,7); //radius of the star disk in middle of screen
  int Array[randomnoofplanets];
  int intposition[randomnoofplanets];
  int planetsize[randomnoofplanets];
  
  for (int orbs = 0; orbs < randomnoofplanets; orbs++){
    Array[orbs] = random(randomstar+4,29);
    intposition[orbs] = random(0,360);
    planetsize[orbs] = random(1,4);
    }
        u8g2.drawFrame(0,0,128,64);
        u8g2.drawDisc(64,32,randomstar); //draw star disc
        int x=0;
        int y=0;
        for (int i=1;i< 200;i++){
          
          
        for (int orbs = 0; orbs < randomnoofplanets; orbs++){
          
          u8g2.drawDisc(64,32,randomstar); //draw star disc
          u8g2.drawCircle(64,32,Array[orbs]);
          x = 64 + Array[orbs] * cos(intposition[orbs]+((i-1)*100/Array[orbs]) *0.01745329); //calculate x position of planet
          y = 32 + Array[orbs] * sin(intposition[orbs]+((i-1)*100/Array[orbs]) *0.01745329); // calculate y position of plan
          
          u8g2.setDrawColor(0);
          u8g2.drawDisc(x,y,planetsize[orbs]); // draw planet disc
          u8g2.setDrawColor(1);
          
        }
         
        for (int orbs = 0; orbs < randomnoofplanets; orbs++){
          
          u8g2.drawDisc(64,32,randomstar); //draw star disc
          u8g2.drawCircle(64,32,Array[orbs]);
          x = 64 + Array[orbs] * cos(intposition[orbs]+(i*100/Array[orbs]) *0.01745329); //calculate x position of planet
          y = 32 + Array[orbs] * sin(intposition[orbs]+(i*100/Array[orbs]) *0.01745329); // calculate y position of plan
          
          u8g2.setDrawColor(1);
          u8g2.drawDisc(x,y,planetsize[orbs]); // draw planet disc
          u8g2.setDrawColor(1);
          
          
        }
         u8g2.sendBuffer();
      }
      
}
  

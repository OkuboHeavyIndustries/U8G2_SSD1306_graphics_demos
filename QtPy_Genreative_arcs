
#include <U8g2lib.h>

//the line below specific to the OLED being used.  Replace F with 1 or 2 to reduce buffer size
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

  
void arc();   


void setup() {
  // put your setup code here, to run once:
randomSeed(analogRead(2));

u8g2.begin();  

//Clear Screen
 u8g2.firstPage();
 do {

 } while ( u8g2.nextPage() );

 u8g2.setDrawColor(1);
}

void loop() {
  // put your main code here, to run repeatedly
 u8g2.setFont(u8g2_font_u8glib_4_tr);
 u8g2.drawFrame(0,0,128,64);
 u8g2.sendBuffer();


 
    arc();


   
   u8g2.sendBuffer();
   delay(1000);

   

   u8g2.clearBuffer();

   
}

void arc() { 

  int dir;
  
  int randomnoofarcs = random(8,20);
  int arcradius[randomnoofarcs];
  int arcsize[randomnoofarcs];
  int arcintangle[randomnoofarcs];
  int arcspeed[randomnoofarcs];
  int arcdirection[randomnoofarcs];

 

for (int arcs = 0; arcs < randomnoofarcs; arcs++){
     arcradius[arcs] =random(2,28);
     arcsize[arcs] =random(1,20);
     arcintangle[arcs] =random(0,361);
     arcspeed[arcs] =random(5,10);
     arcdirection[arcs] =random(0,5);

     
  }


  int x=0;
  int y=0;
  int arcs=0;
  
  
  for (int j=1;j< 200;j++){
    for (arcs = 0; arcs<randomnoofarcs; arcs++){
      for (int i = 0; i<arcsize[arcs]; i++){
        u8g2.setDrawColor(0);
        if (arcdirection[arcs] < 2){
           dir = 1;
        }
        else dir = -1;
        
        
        
        x = 64 + arcradius[arcs] * cos(arcintangle[arcs]+((j+i-1)*arcspeed[arcs]) *0.01745329*dir); //calculate x position of arc
        y = 32 + arcradius[arcs] * sin(arcintangle[arcs]+((j+i-1)*arcspeed[arcs]) *0.01745329*dir); //calculate y position of planet

       
        u8g2.drawPixel(x,y);
       
      }
    u8g2.setDrawColor(1);
    }
     
   for (arcs = 0; arcs<randomnoofarcs; arcs++){
      for (int i = 0; i<arcsize[arcs]; i++){
        if (arcdirection[arcs] < 2){
           dir = 1;
        }
        else  dir = -1;
        
        x = 64 + arcradius[arcs] * cos(arcintangle[arcs]+((j+i)*arcspeed[arcs]) *0.01745329*dir); //calculate x position of arc
        y = 32 + arcradius[arcs] * sin(arcintangle[arcs]+((j+i)*arcspeed[arcs]) *0.01745329*dir); //calculate y position of planet

       
        u8g2.setDrawColor(1);    
        u8g2.drawPixel(x,y);
       
      }
   
    } 
    u8g2.sendBuffer();
  }
  
}
 
